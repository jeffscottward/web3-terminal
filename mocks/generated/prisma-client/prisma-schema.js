module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBuddy {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Buddy {
  id: ID!
  name: String!
  image: String!
}

type BuddyConnection {
  pageInfo: PageInfo!
  edges: [BuddyEdge]!
  aggregate: AggregateBuddy!
}

input BuddyCreateInput {
  id: ID
  name: String!
  image: String!
}

type BuddyEdge {
  node: Buddy!
  cursor: String!
}

enum BuddyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
}

type BuddyPreviousValues {
  id: ID!
  name: String!
  image: String!
}

type BuddySubscriptionPayload {
  mutation: MutationType!
  node: Buddy
  updatedFields: [String!]
  previousValues: BuddyPreviousValues
}

input BuddySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BuddyWhereInput
  AND: [BuddySubscriptionWhereInput!]
  OR: [BuddySubscriptionWhereInput!]
  NOT: [BuddySubscriptionWhereInput!]
}

input BuddyUpdateInput {
  name: String
  image: String
}

input BuddyUpdateManyMutationInput {
  name: String
  image: String
}

input BuddyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [BuddyWhereInput!]
  OR: [BuddyWhereInput!]
  NOT: [BuddyWhereInput!]
}

input BuddyWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBuddy(data: BuddyCreateInput!): Buddy!
  updateBuddy(data: BuddyUpdateInput!, where: BuddyWhereUniqueInput!): Buddy
  updateManyBuddies(data: BuddyUpdateManyMutationInput!, where: BuddyWhereInput): BatchPayload!
  upsertBuddy(where: BuddyWhereUniqueInput!, create: BuddyCreateInput!, update: BuddyUpdateInput!): Buddy!
  deleteBuddy(where: BuddyWhereUniqueInput!): Buddy
  deleteManyBuddies(where: BuddyWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  buddy(where: BuddyWhereUniqueInput!): Buddy
  buddies(where: BuddyWhereInput, orderBy: BuddyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Buddy]!
  buddiesConnection(where: BuddyWhereInput, orderBy: BuddyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BuddyConnection!
  node(id: ID!): Node
}

type Subscription {
  buddy(where: BuddySubscriptionWhereInput): BuddySubscriptionPayload
}
`
      }
    